##
# This is a configuration for Sygnal, the reference Push Gateway for Matrix
# See: matrix.org
##

## Logging #
#
log:
  # Specify a Python logging 'dictConfig', as described at:
  #   https://docs.python.org/3.7/library/logging.config.html#logging.config.dictConfig
  #
  setup:
    version: 1
    formatters:
      normal:
        format: "%(asctime)s [%(process)d] %(levelname)-5s %(name)s %(message)s"
    handlers:
      # This handler prints to Standard Error
      #
      stderr:
        class: "logging.StreamHandler"
        formatter: "normal"
        stream: "ext://sys.stderr"

      # This handler prints to Standard Output.
      #
      stdout:
        class: "logging.StreamHandler"
        formatter: "normal"
        stream: "ext://sys.stdout"

      # This handler demonstrates logging to a text file on the filesystem.
      # You can use logrotate(8) to perform log rotation.
      #
      file:
        class: "logging.handlers.WatchedFileHandler"
        formatter: "normal"
        filename: "./sygnal.log"
    loggers:
      # sygnal.access contains the access logging lines.
      # Comment out this section if you don't want to give access logging
      # any special treatment.
      #
      sygnal.access:
        propagate: false
        handlers: ["stdout"]
        level: "INFO"

      # sygnal contains log lines from Sygnal itself.
      # You can comment out this section to fall back to the root logger.
      #
      sygnal:
        propagate: false
        handlers: ["stderr", "file"]

    root:
      # Specify the handler(s) to send log messages to.
      handlers: ["stderr"]
      level: "INFO"


  access:
    # Specify whether or not to trust the IP address in the `X-Forwarded-For`
    # header. In general, you want to enable this if and only if you are using a
    # reverse proxy which is configured to emit it.
    #
    x_forwarded_for: false

## HTTP Server (Matrix Push Gateway API) #
#
http:
  # Specify a list of interface addresses to bind to.
  #
  # This example listens on the IPv4 loopback device:
  bind_addresses: ['127.0.0.1']
  # This example listens on all IPv4 interfaces:
  #bind_addresses: ['0.0.0.0']
  # This example listens on all IPv4 and IPv6 interfaces:
  #bind_addresses: ['0.0.0.0', '::']

  # Specify the port number to listen on.
  #
  port: 5000

## Metrics #
#
metrics:
  ## Prometheus #
  #
  prometheus:
    # Specify whether or not to enable Prometheus.
    #
    enabled: false

    # Specify an address for the Prometheus HTTP Server to listen on.
    #
    address: '127.0.0.1'

    # Specify a port for the Prometheus HTTP Server to listen on.
    #
    port: 8000

  ## OpenTracing #
  #
  opentracing:
    # Specify whether or not to enable OpenTracing.
    #
    enabled: false

    # Specify an implementation of OpenTracing to use. Currently only 'jaeger'
    # is supported.
    #
    implementation: jaeger

    # Specify the service name to be reported to the tracer.
    #
    service_name: sygnal

    # Specify configuration values to pass to jaeger_client.
    #
    jaeger:
      sampler:
        type: 'const'
        param: 1
#        local_agent:
#          reporting_host: '127.0.0.1'
#          reporting_port:
      logging: true

  ## Sentry #
  #
  sentry:
    # Specify whether or not to enable Sentry.
    #
    enabled: false

    # Specify your Sentry DSN if you enable Sentry
    #
    #dsn: "https://<key>@sentry.example.org/<project>"

## Pushkins/Apps #
#
# Add a section for every push application here.
# Specify the pushkey for the application and also the type.
# For the type, you may specify a fully-qualified Python classname if desired.
#
# event_handlers offer a possibility configure certain pushers to only consider certain
# events and treat them in a specific way.
# If no event_handler is specified, then default behavior applies, meaning that incoming
# events will be treated by the 'message' type handler, except when the incoming
# notification does not contain an event type, then the 'event' type handler is used.
# The example config com.example.myapp.ios describes the different handlers in detail.
#
# Available event_handlers types:
# - voip: sends a voip type notification containing no alert and only call specific
#   information (voip certificate required for apns)
# - event: sends a notification containing no alert and a payload only containing
#   event_id and room_id if available
# - message: represents the default behavior including all event specific
#   information in an alert
#
apps:
  # This is an example APNs push configuration using certificate authentication.
  #
  #com.example.myapp.ios:
  #  type: apns
  #  certfile: com.example.myApp_prod_APNS.pem
  # # Available handlers on apns are (voip | event | message)
  #  event_handlers:
  #    'm.call.invite': voip
  #    'm.room.message': message

  # This is an example APNs push configuration using key authentication.
  #
  #com.example.myapp2.ios:
  #  type: apns
  #  keyfile: my_key.p8
  #  key_id: MY_KEY_ID
  #  team_id: MY_TEAM_ID
  #  topic: MY_TOPIC
  # # Configures which handler should be used to send notifications for a specific event
  # # Available handlers on apns are (voip | event | message)
  #  event_handlers:
  #    'm.call.invite': voip
  #    'm.room.message': message

  # This is an example GCM/FCM push configuration.
  #
  #com.example.myapp.android:
  #  type: gcm
  #  api_key: your_api_key_for_gcm
  #  # This is the maximum number of connections to GCM servers at any one time
  #  # the default is 20.
  #  #max_connections: 20
  #  event_handlers are currently not implemented for the gcm pushkin

  # This is an example Firebase Cloud Messaging v1 push configuration.
  #
  #com.example.myapp.firebase:
  #  type: firebase
  #  credentials: path_to_service_account_json_file
  #  # This is a map of message types to bodies for notifications.
  #  message_types:
  #    'm.image': ðŸ“·
  #    'm.audio': ðŸŽµ
  #    'm.video': ðŸŽ¬
  # # Available handlers on firebase are (voip | event | message)
  # # Firebase currently does not support voip type pushes for iOS. It is therefore
  # # recommended to configure an apns pushkin to handle these notifications separately.
  # # On Android, voip type pushes are data pushes with calling specific information.
  #  event_handlers:
  #    'm.room.message': message
  #    'm.call.invite': voip
  # # Override Android click handler, defaults to FIREBASE_NOTIFICATION_CLICK
  # # Android key for notification messages:
  # # https://firebase.google.com/docs/cloud-messaging/http-server-ref
  #  android_click_action: "ACTION_USER_CLICK"
